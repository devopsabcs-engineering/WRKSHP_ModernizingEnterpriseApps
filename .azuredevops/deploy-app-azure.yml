# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - none

variables:
  - name: buildConfiguration
    value: "Release"
  - name: azureSubscription
    value: "WRKSHP_csa_sub_v2"
  #- name: webAppName
  #  value: app-samplewebapp-oyqorqpnsspf4
  - name: resourceGroupName
    value: rg-bch-modernize-apps
  - name: deploymentName
    value: bch-modernize-apps-deployment

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: build
    displayName: "Build stage"
    jobs:
      - job: Build
        displayName: "Build"
        steps:
          - checkout: self
          - task: UseDotNet@2
            displayName: "Install .NET Core SDK"
            inputs:
              version: 8.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "$(System.DefaultWorkingDirectory)/Application/SampleWebApplicationCore/SampleWebApplicationCore.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "dotnet build $(buildConfiguration)"
          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: "**/*Tests/*.csproj"
              arguments: "--configuration $(buildConfiguration)"
          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: "**/*Tests/*.csproj"
              arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
          - task: PublishTestResults@2
            inputs:
              testRunner: VSTest
              testResultsFiles: "**/*.trx"
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: True
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: True
          # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              artifactName: "myWebsite"
  - stage: deployDev
    displayName: "Deploy stage dev"
    dependsOn: build
    jobs:
      - deployment: DeployDev
        displayName: "Deploy Dev"
        environment: "WRKSHP_myWebsite_dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: "current"
                    artifactName: "myWebsite"
                    targetPath: "$(System.DefaultWorkingDirectory)/myWebsite"
                - task: AzureCLI@2
                  displayName: "get app service name"
                  inputs:
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    azureSubscription: $(azureSubscription)
                    inlineScript: |
                      echo "get app service name from deploymentName"
                      $webAppName = az deployment group show --name $(deploymentName) `
                        --resource-group $(resourceGroupName) `
                        --query properties.outputs.webAppName.value -o tsv
                      Write-Host "##vso[task.setvariable variable=webAppName;isOutput=true]$webAppName"
                      echo "WebAppName: $webAppName"
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "$(azureSubscription)"
                    appType: "webAppLinux"
                    WebAppName: "$(webAppName)"
                    deployToSlotOrASE: true
                    ResourceGroupName: "$(resourceGroupName)"
                    SlotName: "dev"
                    packageForLinux: "$(System.DefaultWorkingDirectory)/myWebsite"
                    RuntimeStack: "DOTNETCORE|8.0"
                    StartupCommand: "dotnet SampleWebApplicationCore.dll"
  - stage: deployStaging
    displayName: "Deploy stage staging"
    dependsOn: deployDev
    jobs:
      - deployment: DeployStaging
        displayName: "Deploy Staging"
        environment: "WRKSHP_myWebsite_staging"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: "get app service name"
                  inputs:
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    azureSubscription: $(azureSubscription)
                    inlineScript: |
                      echo "get app service name from deploymentName"
                      $webAppName = az deployment group show --name $(deploymentName) `
                        --resource-group $(resourceGroupName) `
                        --query properties.outputs.webAppName.value -o tsv
                      Write-Host "##vso[task.setvariable variable=webAppName;isOutput=true]$webAppName"
                      echo "WebAppName: $webAppName"
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "$(azureSubscription)"
                    appType: "webAppLinux"
                    WebAppName: "$(webAppName)"
                    deployToSlotOrASE: true
                    ResourceGroupName: "$(resourceGroupName)"
                    SlotName: "staging"
                    packageForLinux: "$(System.DefaultWorkingDirectory)/myWebsite"
                    RuntimeStack: "DOTNETCORE|8.0"
                    StartupCommand: "dotnet SampleWebApplicationCore.dll"
  - stage: deployProd
    displayName: "Deploy stage prod"
    dependsOn: deployStaging
    jobs:
      - deployment: DeployProd
        displayName: "Deploy Prod"
        environment: "WRKSHP_myWebsite_prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: "get app service name"
                  inputs:
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    azureSubscription: $(azureSubscription)
                    inlineScript: |
                      echo "get app service name from deploymentName"
                      $webAppName = az deployment group show --name $(deploymentName) `
                        --resource-group $(resourceGroupName) `
                        --query properties.outputs.webAppName.value -o tsv
                      Write-Host "##vso[task.setvariable variable=webAppName;isOutput=true]$webAppName"
                      echo "WebAppName: $webAppName"
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "$(azureSubscription)"
                    appType: "webAppLinux"
                    WebAppName: "$(webAppName)"
                    deployToSlotOrASE: true
                    ResourceGroupName: "$(resourceGroupName)"
                    SlotName: "prod"
                    packageForLinux: "$(System.DefaultWorkingDirectory)/myWebsite"
                    RuntimeStack: "DOTNETCORE|8.0"
                    StartupCommand: "dotnet SampleWebApplicationCore.dll"
